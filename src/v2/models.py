# generated by datamodel-codegen:
#   filename:  v2.yaml
#   timestamp: 2020-04-21T09:33:28+00:00

from enum import Enum
from typing import Any, Dict, List, Optional
from uuid import UUID

from pydantic import BaseModel, Field


class Ecosystem(Enum):
    maven = 'maven'
    pypi = 'pypi'
    npm = 'npm'


class Severity(Enum):
    low = 'low'
    medium = 'medium'
    high = 'high'
    critical = 'critical'


class BasicVulnerabilityFields(BaseModel):
    cve_ids: Optional[List[str]] = None
    cvss: float
    cwes: Optional[List[str]] = None
    cvss_v3: str
    severity: 'Severity'
    title: str
    id: str
    url: str


class Exploit(Enum):
    High = 'High'
    Functional = 'Functional'
    Proof_of_Concept = 'Proof of Concept'
    Unproven = 'Unproven'
    Not_Defined = 'Not Defined'


class Reference(BaseModel):
    title: Optional[str] = None
    url: Optional[str] = None


class PremiumVulnerabilityFields(BaseModel):
    malicious: Optional[bool] = True
    patch_exists: Optional[bool] = False
    fixable: Optional[bool] = False
    exploit: Optional['Exploit'] = None
    description: Optional[str] = None
    fixed_in: Optional[List[str]] = None
    references: Optional[List['Reference']] = None


class Package(BaseModel):
    name: str
    version: str
    deps: Optional[List['Package']] = None


class ComponentConflictItem(BaseModel):
    license1: Optional[str] = None
    license2: Optional[str] = None


class ReallyUnknownItem(BaseModel):
    package: Optional[str] = None
    license: Optional[str] = None


class UnknownLicenses(BaseModel):
    component_conflict: List['ComponentConflictItem']
    really_unknown: List['ReallyUnknownItem']


class ConflictPackages(BaseModel):
    package1: str
    license1: str
    package2: str
    license2: str


class LicenseAnalysis(BaseModel):
    outlier_packages: List[Dict[str, Any]]
    conflict_packages: List['ConflictPackages']
    current_stack_license: Dict[str, Any]
    unknown_licenses: 'UnknownLicenses'


class GitHubDetails(BaseModel):
    watchers: Optional[int] = None
    first_release_date: Optional[str] = None
    total_releases: Optional[int] = None
    issues: Optional[Dict[str, Any]] = None
    pull_requests: Optional[Dict[str, Any]] = None
    dependent_repos: Optional[int] = None
    open_issues_count: Optional[int] = None
    latest_release_duration: Optional[str] = None
    forks_count: Optional[int] = None
    contributors: Optional[int] = None
    size: Optional[str] = None
    stargazers_count: Optional[int] = None
    used_by: Optional[List[str]] = None
    dependent_projects: Optional[int] = None


class PackageDetails(BaseModel):
    name: str
    version: str
    latest_version: str
    github: Optional['GitHubDetails'] = None
    licenses: Optional[List[str]] = None
    topic_list: Optional[List[str]] = None
    ecosystem: 'Ecosystem'
    public_vulnerabilities_count: int
    private_vulnerabilities_count: int
    osio_user_count: Optional[int] = None
    url: Optional[str] = None


class PublicVulnerability(PremiumVulnerabilityFields, BasicVulnerabilityFields):
    pass


class PrivateVulnerability(PremiumVulnerabilityFields, BasicVulnerabilityFields):
    pass


class PackageDetailsForRegisteredUser(PackageDetails):
    public_vulnerabilities: Optional[List['PublicVulnerability']] = Field(
        None, description='Publicly known vulnerability details'
    )
    private_vulnerabilities: Optional[List['PrivateVulnerability']] = Field(
        None,
        description='Private vulnerability details, available only to registered\nusers\n',
    )
    recommended_version: Optional[str] = Field(
        None,
        description='Recommended package version which includes fix for both public and private vulnerabilities.\n',
    )
    vulnerable_transitives: Optional[List['PackageDetailsForRegisteredUser']] = None


class PackageDetailsForFreeTier(PackageDetails):
    public_vulnerabilities: Optional[List['BasicVulnerabilityFields']] = Field(
        None, description='Publicly known vulnerability details'
    )
    private_vulnerabilities: Optional[List['BasicVulnerabilityFields']] = Field(
        None, description='Private vulnerability details with limited info'
    )
    recommended_version: Optional[str] = Field(
        None,
        description='Recommended package version which includes fix for public vulnerabilities.\n',
    )
    vulnerable_transitives: Optional[List['PackageDetailsForFreeTier']] = None


class RecommendedPackageData(PackageDetails):
    confidence_reason: Optional[float] = None
    reason: Optional[str] = None
    topic_list: Optional[List[str]] = None


class RegistrationStatus(Enum):
    registered = 'registered'
    freetier = 'freetier'


class RecommendationStatus(Enum):
    success = 'success'
    pgm_error = 'pgm_error'


class Audit(BaseModel):
    started_at: int
    ended_at: int
    api_version: str


class StackAggregatorResult(BaseModel):
    _audit: Optional['Audit'] = None
    uuid: Optional[UUID] = None
    external_request_id: Optional[str] = None
    registration_status: Optional['RegistrationStatus'] = None
    manifest_file_path: Optional[str] = None
    manifest_name: Optional[str] = None
    ecosystem: Optional['Ecosystem'] = None
    unknown_dependencies_count: Optional[int] = None
    unknown_dependencies: Optional[List['Package']] = None
    analyzed_direct_dependencies_count: Optional[int] = None
    transitive_count: Optional[int] = -1
    vulnerable_transitives_count: Optional[int] = -1
    license_analysis: Optional['LicenseAnalysis'] = None
    distinct_licenses: Optional[List[str]] = None
    stack_license_conflict: Optional[bool] = None
    dependencies: Optional[List['Package']] = None
    total_licenses: Optional[int] = None
    recommendation_ready: Optional[bool] = None


class VulnerableTransitive(PackageDetailsForFreeTier):
    dependents: Optional[List['Package']] = Field(
        None, description='Lists all direct dependencies of this package'
    )


class StackAggregatorResultForRegisteredUser(StackAggregatorResult):
    analyzed_direct_dependencies: List['PackageDetailsForRegisteredUser'] = Field(
        ...,
        description="All direct dependencies details regardless of it's vulnerability status\n",
    )
    vulnerable_transitives: List['VulnerableTransitive'] = Field(
        ...,
        description='Only Transitives which has vulnerability associated with it.\n',
    )


class StackAggregatorResultForFreeTier(StackAggregatorResult):
    registration_link: str
    analyzed_direct_dependencies: List['PackageDetailsForFreeTier'] = Field(
        ...,
        description="All direct dependencies details regardless of it's vulnerability status\n",
    )
    vulnerable_transitives: List['VulnerableTransitive']


class StackAggregatorRequest(BaseModel):
    registration_status: 'RegistrationStatus'
    uuid: UUID
    external_request_id: str
    show_transitive: Optional[bool] = Field(
        True,
        description='This is required to enable or disable the transitive support\n',
    )
    ecosystem: 'Ecosystem'
    manifest_file: str
    manifest_file_path: str
    packages: 'Package'


class StackRecommendationResult(BaseModel):
    _audit: 'Audit'
    uuid: UUID
    external_request_id: str
    registration_status: 'RegistrationStatus'
    recommendation_status: 'RecommendationStatus'
    companion: List['RecommendedPackageData']
    manifest_file_path: str
    usage_outliers: List[Dict[str, Any]]


class RecommenderRequest(StackAggregatorRequest):
    pass


Package.update_forward_refs()
PackageDetailsForRegisteredUser.update_forward_refs()
PackageDetailsForFreeTier.update_forward_refs()
